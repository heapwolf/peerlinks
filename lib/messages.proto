syntax = "proto3";

//
// Network
//

message Hello {
  uint32 version = 1;
  bytes peer_id = 2;
}

message Shake {
  bool is_duplicate = 1;
}

message Link {
  message TBS {
    bytes trustee_pub_key = 1;
    string trustee_display_name = 2;
    double valid_from = 3;
    double valid_to = 4;

    // NOTE: This MUST be filled either by sender/recipient before
    // generating/verifying the signature below.
    bytes channel_id = 5;
  }

  TBS tbs = 1;
  bytes signature = 2;
}

message Invite {
  bytes channel_pub_key = 1;
  string channel_name = 2;

  repeated Link chain = 3;
}

message EncryptedInvite {
  // NOTE: `request_id = HASH(req.trustee_pub_key, 'vowlink-invite')[:32]`
  bytes request_id = 1;

  bytes box = 2;
}

// QR Code
message InviteRequest {
  bytes peer_id = 1;
  bytes trustee_pub_key = 2;
}

message ChannelMessage {
  // First message on any channel
  message Root {
  }

  message Body {
    oneof body {
      Root root = 1;
      string json = 2;
    }
  }

  message Content {
    message TBS {
      repeated bytes parents = 1;
      int64 height = 2;
      repeated Link chain = 3;
      double timestamp = 4;
      Body body = 5;
    }

    // NOTE: can be empty only in the root message
    repeated bytes parents = 1;

    // height = max(p.height for p in parents)
    int64 height = 2;

    // Link chain that leads from the channel's public key to the signer of
    // this message
    repeated Link chain = 3;

    // Floating point unix time
    double timestamp = 4;

    // body of the message
    Body body = 5;

    bytes signature = 6;
  }

  message EncryptionKeyInput {
    bytes channel_pub_key = 1;
  }

  // Encryption nonce for Sodium
  bytes nonce = 1;

  // NOTE: encryption key = HASH(EncryptionKeyInput, 'vowlink-symmetric')
  bytes encrypted_content = 2;
}

message Query {
  bytes channel_id = 1;
  uint32 seq = 2;
  oneof cursor {
    int64 height = 3;
    bytes hash = 4;
  }
  bool is_backward = 5;
  uint32 limit = 6;
}

message QueryResponse {
  message Abbreviated {
    repeated bytes parents = 1;
    bytes hash = 2;
  }

  bytes channel_id = 1;
  uint32 seq = 2;
  repeated Abbreviated abbreviated_messages = 3;
  bytes forward_hash = 4;
  bytes backward_hash = 5;
}

message Bulk {
  bytes channel_id = 1;
  uint32 seq = 2;
  repeated bytes hashes = 3;
}

message BulkResponse {
  bytes channel_id = 1;
  uint32 seq = 2;
  repeated ChannelMessage messages = 3;
  uint32 forward_index = 4;
}

message Error {
  string reason = 1;
}

message Notification {
  bytes channel_id = 1;
}

message Packet {
  oneof content {
    Error error = 1;
    EncryptedInvite invite = 2;

    // Synchronization
    Query query = 3;
    QueryResponse query_response = 4;
    Bulk bulk = 5;
    BulkResponse bulk_response = 6;

    // Request synchronization on new messages
    Notification notification = 7;
  }
}

//
// Storage
//

message Identity {
  message ChannelChain {
    bytes channel_id = 1;
    repeated Link links = 2;
  }

  string name = 1;
  bytes public_key = 2;
  bytes secret_key = 3;

  repeated ChannelChain channel_chains = 4;
  string metadata = 5;
}

message Channel {
  bytes public_key = 1;
  string name = 2;

  string metadata = 4;
}
